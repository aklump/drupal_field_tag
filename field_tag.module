<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field_tag\Entity\FieldTag;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function field_tag_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  $settings = $field->getThirdPartySettings('field_tag') + [
      'enabled' => FALSE,
      'title' => t('Tags'),
      'description' => 'Separate multiple tags with a comma.',
      'weight' => 0,
      'required' => FALSE,
    ];
  $form['third_party_settings']['field_tag'] = [
    '#type' => 'details',
    '#title' => t('Field tag'),
    '#description' => t('Enabling tagging for this field adds a textfield to the widget form that allows the admin to tag the value entered in this field with an arbitrary string of text, which can be used by developers to manipulate the field.'),
    '#open' => $settings['enabled'],
  ];
  $form['third_party_settings']['field_tag']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable tagging for this field?'),
    '#default_value' => $settings['enabled'],
  ];
  $states = array(
    'visible' => array(
      ':input[name="third_party_settings[field_tag][enabled]"]' => array(
        'checked' => TRUE,
      ),
    ),
  );
  $form['third_party_settings']['field_tag']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Widget field label'),
    '#default_value' => $settings['title'],
    '#required' => TRUE,
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['description'] = [
    '#type' => 'textfield',
    '#title' => t('Widget field description'),
    '#default_value' => $settings['description'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $settings['weight'],
    '#delta' => 50,
    '#states' => $states,
  );
  $form['third_party_settings']['field_tag']['required'] = [
    '#type' => 'checkbox',
    '#title' => t('Make the field required in the widget form.'),
    '#default_value' => $settings['required'],
    '#states' => $states,
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function field_tag_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (($field_definition = $context['items']->getFieldDefinition()) instanceof FieldConfig
    && ($settings = $field_definition->getThirdPartySettings('field_tag'))
    && ($settings['enabled'] ?? FALSE)) {

    // On subsequent submissions, such as an AJAX remove of an item in a item
    // list, the field tag entity id will be present in context, we have to use
    // this because the delta is no longer reliable (due to list modification
    // via AJAX in the form).
    $data = $context['items']->get($context['delta'])->field_tag;
    $field_tag_id = NULL;
    if (isset($data['target_id'])) {
      $field_tag_id = $data['target_id'];
      $default_value = $data['tag'] ?? '';
    }

    // The first time the form is loaded we have to rely on the delta value to
    // locate the correct tag for this item.
    else {
      $field_tag = FieldTag::loadByParentField($context['items']->getParent()
        ->getEntity(), $field_definition->getName(), $context['delta']);
      if ($field_tag->id()) {
        $field_tag_id = (int) $field_tag->id();
      }
      $default_value = (string) $field_tag;
    }

    // In some widgets this should not be shown under certain circumstances,
    // e.g., a file field that has no files attached yet, should be seeing the
    // tagging input yet.  Only after it has a file.
    $access = TRUE;
    if ($is_file = $context['items'] instanceof FileFieldItemList) {
      $access = !empty($element['#default_value']['fids']);
    }

    // Store the target_id of the field tag for proper reference if the delta
    // become irrelevant (see above).
    $element['field_tag']['target_id'] = [
      '#type' => 'value',
      '#value' => $field_tag_id,
    ];
    $element['field_tag']['tag'] = [
      '#weight' => $settings['weight'],
      '#type' => 'textfield',
      '#required' => $settings['required'],
      '#title' => $settings['title'],
      '#description' => $settings['description'],
      '#default_value' => $default_value,
      '#attributes' => ['class' => ['field-tag']],
      '#access' => $access && \Drupal::currentUser()
          ->hasPermission('access field tag inputs'),
    ];
  }
}

/**
 * Implements hook_entity_insert().
 */
function field_tag_entity_insert(EntityInterface $entity) {
  field_tag_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function field_tag_entity_update(EntityInterface $entity) {
  if (!$entity instanceof FieldableEntityInterface) {
    return;
  }

  if ($entity->getEntityTypeId() === 'field_tag') {
    return;
  }

  foreach ($entity->getFieldDefinitions() as $field_name => $field_definition) {
    if ($field_definition instanceof FieldConfig
      && ($field_definition->getThirdPartySettings('field_tag'))) {
      foreach ($entity->{$field_name} as $delta => $item) {

        // field_tag may be a string value, in which case it will be saved based
        // on the delta, but it may also be an array with the target_id
        // indicated, in which case the delta is ignored.  We normalize scalars
        // at this point to unify subsequent code.
        $data = \Drupal::service('field_tag')->normalizeItemFieldTag($item);

        // Get an object instance using whatever reference we have.
        if ($data
          && $data['target_id']
          && ($field_tag = FieldTag::load($data['target_id']))
        ) {

          // The reason for all this repeat, is that it's very possible that the
          // delta has changed, but we might as well make sure that the other
          // values are updated as well.
          $field_tag->parent_entity = $entity->getEntityTypeId();
          $field_tag->parent_id = $entity->id();
          $field_tag->field_name = $field_name;
          $field_tag->delta = $delta;
        }
        else {
          $field_tag = FieldTag::loadByParentField($entity, $field_name, $delta);
        }

        // Get the value as it's been set on the entity.
        $tag_value = trim($data['tag'] ?? '');
        if (!$tag_value) {
          if ($field_tag->id()) {

            // Purge empty values from the database.
            $field_tag->delete();
          }
        }
        else {

          // Only save a value if it's not empty.
          $field_tag->get('tag')->value = $tag_value;
          $field_tag->save();
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes tags on entities that get deleted.
 */
function field_tag_entity_delete(EntityInterface $entity) {
  if (($field_tags = \Drupal::service('field_tag')
    ->getAllFieldTagsByParent($entity))) {
    \Drupal::entityTypeManager()
      ->getStorage('field_tag')->delete($field_tags);
  }
}
