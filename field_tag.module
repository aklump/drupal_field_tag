<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field_tag\Entity\FieldTag;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function field_tag_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  $settings = $field->getThirdPartySettings('field_tag') + [
      'enabled' => FALSE,
      'title' => t('Tags'),
      'description' => 'Separate multiple tags with a comma.',
      'weight' => 0,
      'required' => FALSE,
    ];
  $form['third_party_settings']['field_tag'] = [
    '#type' => 'details',
    '#title' => t('Field tag'),
    '#description' => t('Enabling tagging for this field adds a textfield to the widget form that allows the admin to tag the value entered in this field with an arbitrary string of text, which can be used by developers to manipulate the field.'),
    '#open' => $settings['enabled'],
  ];
  $form['third_party_settings']['field_tag']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable tagging for this field?'),
    '#default_value' => $settings['enabled'],
  ];
  $states = array(
    'visible' => array(
      ':input[name="third_party_settings[field_tag][enabled]"]' => array(
        'checked' => TRUE,
      ),
    ),
  );
  $form['third_party_settings']['field_tag']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Widget field label'),
    '#default_value' => $settings['title'],
    '#required' => TRUE,
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['description'] = [
    '#type' => 'textfield',
    '#title' => t('Widget field description'),
    '#default_value' => $settings['description'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $settings['weight'],
    '#delta' => 50,
    '#states' => $states,
  );
  $form['third_party_settings']['field_tag']['required'] = [
    '#type' => 'checkbox',
    '#title' => t('Make the field required in the widget form.'),
    '#default_value' => $settings['required'],
    '#states' => $states,
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function field_tag_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (($field_definition = $context['items']->getFieldDefinition()) instanceof FieldConfig
    && ($settings = $field_definition->getThirdPartySettings('field_tag'))
    && ($settings['enabled'] ?? FALSE)) {

    $default_value = (string) FieldTag::loadFromParent($context['items']->getParent()
      ->getEntity(), $field_definition->getName(), $context['delta']);

    // In some widgets this should not be shown under certain circumstances,
    // e.g., a file field that has no files attached yet, should be seeing the
    // tagging input yet.  Only after it has a file.
    $access = TRUE;
    if ($is_file = $context['items'] instanceof FileFieldItemList) {
      $access = !empty($element['#default_value']['fids']);
    }

    $element['field_tag'] = [
      '#weight' => $settings['weight'],
      '#type' => 'textfield',
      '#required' => $settings['required'],
      '#title' => $settings['title'],
      '#description' => $settings['description'],
      '#default_value' => $default_value,
      '#attributes' => ['class' => ['field-tag']],
      '#access' => $access && \Drupal::currentUser()
          ->hasPermission('access field tag inputs'),
    ];
  }
}

/**
 * Implements hook_entity_insert().
 */
function field_tag_entity_insert(EntityInterface $entity) {
  field_tag_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function field_tag_entity_update(EntityInterface $entity) {
  // Only worry about entities that are fieldable.
  if ($entity instanceof FieldableEntityInterface) {
    foreach ($entity->getFieldDefinitions() as $field_name => $field_definition) {
      if ($field_definition instanceof FieldConfig
        && ($field_definition->getThirdPartySettings('field_tag'))) {
        foreach ($entity->{$field_name} as $delta => $item) {

          // Load or create a new fieldTag instance.
          $field_tag = FieldTag::loadFromParent($entity, $field_name, $delta);

          // Get the value as it's been set on the entity.
          $tag_value = trim($item->field_tag ?? '');
          if (!$tag_value) {
            if ($field_tag->id()) {

              // Purge empty values from the database.
              $field_tag->delete();
            }
          }
          else {

            // Only save a value if it's not empty.
            $field_tag->get('tag')->value = $tag_value;
            $field_tag->save();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes tags on entities that get deleted.
 */
function field_tag_entity_delete(EntityInterface $entity) {
  if (($field_tags = \Drupal::service('field_tag')
    ->getAllFieldTagsByParent($entity))) {
    \Drupal::entityTypeManager()
      ->getStorage('field_tag')->delete($field_tags);
  }
}
