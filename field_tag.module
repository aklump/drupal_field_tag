<?php

use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\field\FieldConfigInterface;
use Drupal\field_tag\Entity\FieldTagInterface;
use Drupal\field_tag\Event\FieldTagEvents;
use Drupal\field_tag\Event\TagEvent;
use Drupal\field_tag\FieldStorageHandler;
use Drupal\field_tag\Plugin\migrate\source\FieldTagContentEntity;
use Drupal\field_tag\Tags;
use Drupal\field_tag\WidgetHandler;

const FIELD_TAG_DEFAULT_LABEL = 'Tags';

/**
 * Provide information about field tags and their groups.
 *
 * @return array
 *   An associative array with the following keys:
 *   - types array Keyed by the type ids.  Each value is an array with these
 *   keys:
 *     - name string The human name
 *     - description string The description of the tag type/group.
 *   - tags array Keyed by the type ids.  Each value represents a field tag and
 *   has these keys:
 *     - tag string The field tag.
 *     - description string The description of the field tag.
 *     - match string An optional regex pattern used to match this tag.  If
 *   your field tag is not a constant, then you should include this as it will
 *   help to clean up the documentation.
 */
function field_tag_tags_info(): array {
  $tags_info = &drupal_static(__METHOD__);
  if (!is_null($tags_info)) {
    return $tags_info;
  }

  if (($cache = Drupal::cache()->get('field_tag:tags_info'))) {
    return $cache->data;
  }

  $module_handler = Drupal::moduleHandler();
  $tags_info = $module_handler->invokeAll('field_tag_tags_info');

  $stored = Drupal::database()
    ->select('field_tag')
    ->distinct()
    ->fields('field_tag', ['tag'])
    ->execute()
    ->fetchCol();

  $field_tags_in_use = Tags::create();
  foreach ($stored as $item) {
    $field_tags_in_use = $field_tags_in_use->merge(Tags::create($item));
  }

  $field_tags_documented = Tags::create();

  if (!empty($tags_info['tags'])) {
    foreach ($tags_info['tags'] as $tags) {
      foreach ($tags as $tag) {
        $field_tags_documented->add($tag['tag']);
      }
    }

    // Pull out all the regex matching strings.
    $regexes = array_map(function ($item) {
      return array_filter(array_map(function ($item) {
        return $item['match'] ?? NULL;
      }, $item));
    }, $tags_info['tags']);
  }

  $all_regexes = [];
  if (!empty($regexes)) {
    foreach ($regexes as $regex) {
      $all_regexes = array_merge($all_regexes, $regex);
    }
    $all_regexes = array_unique($all_regexes);
  }

  $handler = function (array $list, string $key, array $type_info) use (&$tags_info, $all_regexes) {
    foreach ($list as $tag) {
      foreach ($all_regexes as $pattern) {
        if (preg_match($pattern, $tag)) {
          continue 2;
        }
      }
      $tags_info['tags'][$key][] = ['tag' => $tag, 'description' => ''];
    }
    if (!empty($tags_info['tags'][$key])) {
      $tags_info['types'][$key] = $type_info;
    }
  };


  $list = $field_tags_documented->diff($field_tags_in_use)->all();
  $handler($list, 'unused', [
    'name' => t('Unused'),
  ]);

  $list = $field_tags_in_use->diff($field_tags_documented)->all();
  $handler($list, 'undocumented', [
    'name' => t('Undocumented'),
    'description' => t('These tags are used, but not documented.'),
  ]);

  $module_handler->alter('field_tag_tags_info', $tags_info);
  Drupal::cache()
    ->set('field_tag:tags_info', $tags_info, CacheBackendInterface::CACHE_PERMANENT, ['field_tag_list']);

  return $tags_info;
}


/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function field_tag_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if (!method_exists($form_object, 'getEntity')) {
    return;
  }
  $field = $form_object->getEntity();
  $settings = $field->getThirdPartySettings('field_tag');
  $settings += [
    'enabled' => FALSE,
    'title' => t(FIELD_TAG_DEFAULT_LABEL),
    'description' => '',
    'placeholder' => '',
    'weight' => 10,
    'required' => FALSE,
  ];
  $form['third_party_settings']['field_tag'] = [
    '#type' => 'details',
    '#title' => t('Field tag'),
    '#open' => $settings['enabled'],
  ];
  $form['third_party_settings']['field_tag']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable tagging for this field?'),
    '#default_value' => $settings['enabled'],
    '#description' => t('Adds a textfield to the widget that allows content managers to tag instances of this field with an arbitrary string of CSV text, which can be used by developers for special handling.'),
  ];
  $states = array(
    'visible' => array(
      ':input[name="third_party_settings[field_tag][enabled]"]' => array(
        'checked' => TRUE,
      ),
    ),
  );
  $form['third_party_settings']['field_tag']['required'] = [
    '#type' => 'checkbox',
    '#title' => t('Require at least one tag on this field?'),
    '#default_value' => $settings['required'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Tag textfield label'),
    '#default_value' => $settings['title'],
    '#required' => TRUE,
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['placeholder'] = [
    '#type' => 'textfield',
    '#title' => t('Tag textfield placeholder'),
    '#default_value' => $settings['placeholder'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['description'] = [
    '#type' => 'textfield',
    '#title' => t('Tag textfield description'),
    '#default_value' => $settings['description'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Tag input weight'),
    '#description' => t('Use this to position the tag input relative to the field widget.'),
    '#default_value' => $settings['weight'],
    '#delta' => 50,
    '#states' => $states,
  );
}

function field_tag_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  $widget = new WidgetHandler(
    $form_state,
    $context,
    Drupal::currentUser()
  );

  if (!$widget->access()->isAllowed()) {
    return;
  }


  $values = $widget->getValues();

  // Add the field tag input to all items in the field when there is a $value
  // set.  The value will only be set on items that have values, so the final
  // file item will not.
  foreach (Element::children($field_widget_complete_form['widget']) as $delta) {
    if (!is_numeric($delta) || !array_key_exists($delta, $values)) {
      continue;
    }
    $element = &$field_widget_complete_form['widget'][$delta];
    $settings = $widget->getSettings();
    $element['field_tag'] = [
      '#weight' => $settings['weight'],
      '#type' => 'textfield',
      '#required' => $settings['required'],
      '#title' => $settings['title'],
      '#placeholder' => $settings['placeholder'] ?? '',
      '#description' => $settings['description'] ?? '',
      '#default_value' => $values[$delta] ?? '',
      '#attributes' => ['class' => ['field-tag']],
    ];
  }
}

/**
 * Implements hook_entity_insert().
 */
function field_tag_entity_insert(EntityInterface $entity) {
  field_tag_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 */
function field_tag_entity_update(EntityInterface $parent) {
  if ('field_tag' === $parent->getEntityTypeId()) {
    return;
  }

  /** @var \Drupal\field_tag\FieldTagService $field_tag_service */
  $field_tag_service = Drupal::service('field_tag');
  $fields = $field_tag_service->getTaggedFieldDefinitionsByEntity($parent);
  if (count($fields) === 0) {
    return;
  }

  $dispatcher = Drupal::service('event_dispatcher');
  $storage_handler = new FieldStorageHandler();

  foreach ($fields as $field) {
    $list = $parent->get($field->getName());
    if (!$list instanceof FieldItemListInterface) {
      continue;
    }
    $pending_actions = $storage_handler->getStorageActions($list);
    foreach ($pending_actions as $pending_action) {
      switch ($pending_action['action']) {
        case FieldStorageHandler::ACTION_DELETE:
          $pending_action['fieldTag']->delete();
          break;

        case FieldStorageHandler::ACTION_SAVE:
          $pending_action['fieldTag']->save();
          break;
      }

      foreach ($pending_action['events'] as $type => $tags) {
        $context = clone $pending_action['fieldTag'];
        $context->setValue($tags);
        $dispatcher->dispatch($type, new TagEvent($context));
      }

    }

    $field_tag_service->attachTags($parent);

    // fieldTag instances get detached from the parent entities during the CRUD
    // operations.  They will not always be present, but this will ensure
    // normalization.
    // @see \Drupal\field_tag\FieldTagService::attachTags()
    foreach ($list as $item) {
      unset($item->fieldTag);
    }
    unset($parent->field_tag_attached);
  }
}

/**
 * Implements hook_entity_delete().
 *
 * For any parent entity being deleting, iterates over and deletes all field tag
 * entities.  Fires the removal event for the deleted field tags.
 */
function field_tag_entity_delete(EntityInterface $entity) {
  $field_tag_service = Drupal::service('field_tag');

  if ($entity instanceof FieldTagInterface) {
    Drupal::service('event_dispatcher')
      ->dispatch(FieldTagEvents::TAG_REMOVED, new TagEvent($entity));
  }

  elseif ($field_tag_service->getTaggedFieldDefinitionsByEntity($entity)) {
    // Check ::getTaggedFieldDefinitionsByEntity() first because it doesn't
    // require a db call and if that passes then lookup the field tags
    // associated with $entity.
    $field_tags = $field_tag_service->getAllFieldTagsByParent($entity);
    foreach ($field_tags as $field_tag) {
      $field_tag->delete();
      // Note: the event will fire in the recursive call to this function when
      // $entity is an instance of FieldTagInterface.
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function field_tag_field_storage_config_delete(Drupal\Core\Entity\EntityInterface $entity) {
  // When a field is deleted at the storage level it means that field no longer
  // exists on the entity and so we mark any tags associated with that field as
  // deleted for better housekeeping.  This flag can be used to prune the
  // entities by developers if they so desire.
  Drupal::database()->update('field_tag')
    ->fields(['deleted' => TRUE])
    ->condition('parent_entity', $entity->get('entity_type'))
    ->condition('field_name', $entity->getName())
    ->execute();
}


//function field_tag_form_alter(&$form, FormStateInterface $form_state) {
//  if (empty($form['#entity_type']) || !isset($form['meta'])) {
//    return;
//  }
//  $form['field_tag_visibility'] = [
//    '#type' => 'details',
//    '#title' => t(FIELD_TAG_DEFAULT_LABEL),
//    '#attributes' => ['class' => ['node-form-field-tags']],
//    '#group' => 'advanced',
//    [
//      '#markup' => \Drupal\Core\Render\Markup::create(t('<input type="checkbox" class="js-field-tag-visibility"/> Reveal tags')),
//    ],
//  ];
//}


/**
 * Implements hook_migrate_source_info_alter().
 */
function field_tag_migrate_source_info_alter(&$info) {

  // We working with the "content_entity:*" source plugins, we are talking about
  // content in the current database, therefore we look to the current database
  // to see what entities have tags and then we modify only those classes in the
  // source plugins, so that when those entity types are loaded, the field tags
  // are automatically attached.
  $entity_types = Drupal::database()
    ->select('field_tag', 'ft')
    ->fields('ft', ['parent_entity'])
    ->distinct('parent_entity')
    ->execute()
    ->fetchAllAssoc('parent_entity');
  foreach (array_keys($entity_types) as $entity_type) {
    $key = "content_entity:$entity_type";
    if (isset($info[$key]) && $info[$key]['requirements_met']) {
      $info[$key]['class'] = FieldTagContentEntity::class;
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * @see field_tag_form_node_form_alter()
 */
function field_tag_entity_extra_field_info(): array {
  $extra = [];

  if (Drupal::service('module_handler')->moduleExists('node')) {
    try {
      $node_types = Drupal::entityTypeManager()
        ->getStorage('node_type')
        ->loadMultiple();
    }
    catch (Exception $exception) {
      $node_types = [];
    }
    foreach ($node_types as $node_type) {

      // The key(s) cannot be the module name, because that might be mistaken with
      // the field API if a field exists called "field_tag".  This is why we use
      // an underscore in this pseudo-field name.

      $extra['node'][$node_type->id()]['form']['_field_tag__used'] = [
        'label' => t('Field tags used'),
        'description' => t('Display any tags attached to the entity.'),
        'weight' => 0,
      ];
      $extra['node'][$node_type->id()]['form']['_field_tag__types'] = [
        'label' => t('Field tag list'),
        'description' => t('Display available field tags and descriptions.'),
        'weight' => 0,
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see field_tag_entity_extra_field_info()
 */
function field_tag_form_node_form_alter(array &$form, FormStateInterface $form_state) {

  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();

  /** @var \Drupal\field_tag\FieldTagService $field_tag_service */
  $field_tag_service = Drupal::service('field_tag');
  $definitions = $field_tag_service->getTaggedFieldDefinitionsByEntity($entity);
  if (!$definitions) {
    return;
  }

  // Analyze the settings to get the appropriate label to use.
  $labels = array_map(function (FieldConfigInterface $config) {
    return $config->getThirdPartySettings('field_tag')['title'] ?? '';
  }, $definitions);
  $labels = array_count_values($labels);
  arsort($labels, SORT_NUMERIC);
  $label = key($labels);
  $label = NULL;
  if (empty($label)) {
    $label = FIELD_TAG_DEFAULT_LABEL;
  }

  // Show all that tags attached to this entity.
  $used = $field_tag_service->getAllFieldTagsByParent($entity);
  if (count($used)) {
    $tags_used = new Tags();
    foreach ($used as $item) {
      $tags_used = $tags_used->merge(new Tags($item->getValue()));
    }
    $form['_field_tag__used'] = [
      '#type' => 'details',
      '#title' => t('@label used', [
        '@label' => $label,
      ]),
      '#group' => 'advanced',
    ];
    $form['_field_tag__used']['tags'] = [
      '#markup' => implode(', ', $tags_used->sort()->all()),
    ];
  }

  // Now since field tags are used in this form, we'll proceed to add the
  // details section to the advanced (sidebar) of the page.
  $form['_field_tag__types'] = [
    '#type' => 'details',
    '#title' => t('@label help', [
      '@label' => $label,
    ]),
    '#description' => t('When entering multiple tags, separate with a comma.'),
    '#group' => 'advanced',
  ];

  $info = field_tag_tags_info();
  foreach (($info['types'] ?? []) as $type_id => $type_info) {
    $form['_field_tag__types'][$type_id] = [
      '#type' => 'fieldset',
      '#title' => $type_info['name'],
      [
        '#theme' => 'field_tag_tags_by_type',
        '#tag_type' => $type_info,
        '#field_tags' => $info['tags'][$type_id],
        '#sort' => TRUE,
      ],
    ];
  }


}

/**
 * Implements hook_theme().
 */
function field_tag_theme($existing, $type, $theme, $path): array {
  return [
    'field_tag_tags_by_type' => [
      'variables' => [

        // Each element should have the keys "name" and "description".
        'tag_type' => '',

        // Each element should have the keys "tag" and "description".
        'field_tags' => '',

        // Set this to false to not alphabetically sort the tags.
        'sort' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_field_tag_tags_by_type(&$vars) {
  if ($vars['sort']) {
    usort($vars['field_tags'], function ($a, $b) {
      return strcasecmp($a['tag'], $b['tag']);
    });
  }
}
