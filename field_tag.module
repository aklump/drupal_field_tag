<?php

use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field_tag\Entity\FieldTag;
use Drupal\field_tag\Plugin\migrate\source\FieldTagContentEntity;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;


/**
 * Provide information about field tags and their groups.
 *
 * @return array
 *   An associative array with the following keys:
 *   - types array Keyed by the type ids.  Each value is an array with these
 *   keys:
 *     - name string The human name
 *     - description string The description of the tag type/group.
 *   - tags array Keyed by the type ids.  Each value represents a field tag and
 *   has these keys:
 *     - tag string The field tag.
 *     - description string The description of the field tag.
 *     - match string An optional regex pattern used to match this tag.  If
 *   your field tag is not a constant, then you should include this as it will
 *   help to clean up the documentation.
 */
function field_tag_tags_info() {
  $tags_info = &drupal_static(__METHOD__, NULL);
  if (!is_null($tags_info)) {
    return $tags_info;
  }

  if (($cache = \Drupal::cache()->get('field_tag:tags_info'))) {
    $tags_info = $cache->data;

    return $tags_info;
  }

  $module_handler = \Drupal::moduleHandler();
  $tags_info = $module_handler->invokeAll('field_tag_tags_info');

  $field_tag_service = \Drupal::service('field_tag');
  $stored = \Drupal::database()
    ->select('field_tag')
    ->distinct()
    ->fields('field_tag', ['tag'])
    ->execute()
    ->fetchCol();
  $stored = array_map(function ($field_tag_value) use ($field_tag_service) {
    return $field_tag_service->getFieldTagsAsArray($field_tag_value);
  }, $stored);
  $field_tags_in_use = [];
  foreach ($stored as $tags) {
    $field_tags_in_use = array_merge($field_tags_in_use, array_map('trim', $tags));
  }
  $field_tags_in_use = array_unique($field_tags_in_use);
  $field_tags_documented = [];
  foreach ($tags_info['tags'] as $tags) {
    foreach ($tags as $tag) {
      $field_tags_documented[] = $tag['tag'];
    }
  }

  // Pull out all the regex matching strings.
  $regexes = array_map(function ($item) {
    return array_filter(array_map(function ($item) {
      return $item['match'] ?? NULL;
    }, $item));
  }, $tags_info['tags']);
  $all_regexes = [];
  foreach ($regexes as $regex) {
    $all_regexes = array_merge($all_regexes, $regex);
  }
  $all_regexes = array_unique($all_regexes);

  $handler = function (array $list, string $key, array $type_info) use (&$tags_info, $all_regexes) {
    foreach ($list as $tag) {
      foreach ($all_regexes as $pattern) {
        if (preg_match($pattern, $tag)) {
          continue 2;
        }
      }
      $tags_info['tags'][$key][] = ['tag' => $tag, 'description' => ''];
    }
    if ($tags_info['tags'][$key]) {
      $tags_info['types'][$key] = $type_info;
    }
  };

  $list = array_diff($field_tags_documented, $field_tags_in_use);
  $handler($list, 'unused', [
    'name' => t('Unused'),
  ]);

  $list = array_diff($field_tags_in_use, $field_tags_documented);
  $handler($list, 'undocumented', [
    'name' => t('Undocumented'),
    'description' => t('These tags are used, but not documented.'),
  ]);

  $module_handler->alter('field_tag_tags_info', $tags_info);
  \Drupal::cache()
    ->set('field_tag:tags_info', $tags_info, CacheBackendInterface::CACHE_PERMANENT, ['field_tag_list']);

  return $tags_info;
}


/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function field_tag_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  $settings = $field->getThirdPartySettings('field_tag');
  $settings += [
    'enabled' => FALSE,
    'title' => t('Tags'),
    'description' => '',
    'placeholder' => '',

    // I will assume the tags should come AFTER the widget.
    'weight' => 1,
    'required' => FALSE,
  ];
  $form['third_party_settings']['field_tag'] = [
    '#type' => 'details',
    '#title' => t('Field tag'),
    '#open' => $settings['enabled'],
  ];
  $form['third_party_settings']['field_tag']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable tagging for this field?'),
    '#default_value' => $settings['enabled'],
    '#description' => t('Adds a textfield to the widget that allows content managers to tag instances of this field with an arbitrary string of CSV text, which can be used by developers for special handling.'),
  ];
  $states = array(
    'visible' => array(
      ':input[name="third_party_settings[field_tag][enabled]"]' => array(
        'checked' => TRUE,
      ),
    ),
  );
  $form['third_party_settings']['field_tag']['required'] = [
    '#type' => 'checkbox',
    '#title' => t('Require at least one tag on this field?'),
    '#default_value' => $settings['required'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Tag textfield label'),
    '#default_value' => $settings['title'],
    '#required' => TRUE,
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['placeholder'] = [
    '#type' => 'textfield',
    '#title' => t('Tag textfield placeholder'),
    '#default_value' => $settings['placeholder'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['description'] = [
    '#type' => 'textfield',
    '#title' => t('Tag textfield description'),
    '#default_value' => $settings['description'],
    '#states' => $states,
  ];
  $form['third_party_settings']['field_tag']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Tag input weight'),
    '#description' => t('Use this to position the tag input relative to the field widget.'),
    '#default_value' => $settings['weight'],
    '#delta' => 50,
    '#states' => $states,
  );
}

/**
 * Implements hook_field_widget_form_alter().
 */
function field_tag_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (($field_definition = $context['items']->getFieldDefinition()) instanceof FieldConfig
    && ($settings = $field_definition->getThirdPartySettings('field_tag'))
    && ($settings['enabled'] ?? FALSE)) {

    // On subsequent submissions, such as an AJAX remove of an item in a item
    // list, the field tag entity id will be present in context, we have to use
    // this because the delta is no longer reliable (due to list modification
    // via AJAX in the form).
    $item = $context['items']->get($context['delta']);
    $default_value = \Drupal::service('field_tag')
      ->normalizeItemFieldTag($item);

    // The first time the form is loaded we have to rely on the delta value to
    // locate the correct tag for this item.
    if (is_null($default_value)) {
      $entity = $context['items']->getParent()->getEntity();
      $field_name = $field_definition->getName();

      // This is important to make sure that we do not leave orphaned field tag
      // entities in the database.
      $entity->field_tag_sync[] = $field_name;
      $entity->field_tag_sync = array_unique($entity->field_tag_sync);

      $field_tag = FieldTag::loadByParentField($entity, $field_name, $context['delta']);
      $default_value = (string) $field_tag;
    }

    // We have to attach this also to the item so it passes through correctly in
    // all situations.
    $context['items']->get($context['delta'])->field_tag = $default_value;

    // In some widgets this should not be shown under certain circumstances,
    // e.g., a file field that has no files attached yet, should be seeing the
    // tagging input yet.  Only after it has a file.
    $access = TRUE;
    if ($is_file = $context['items'] instanceof FileFieldItemList) {
      $access = !empty($element['#default_value']['fids']);
    }

    $element['field_tag'] = [
      '#weight' => $settings['weight'],
      '#type' => 'textfield',
      '#required' => $settings['required'],
      '#title' => $settings['title'],
      '#placeholder' => $settings['placeholder'] ?? '',
      '#description' => $settings['description'] ?? '',
      '#default_value' => $default_value,
      '#attributes' => ['class' => ['field-tag']],
      '#access' => $access && \Drupal::currentUser()
          ->hasPermission('access field tag inputs'),
    ];
  }
}

/**
 * Implements hook_entity_insert().
 */
function field_tag_entity_insert(EntityInterface $entity) {
  field_tag_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * This may synchronize field tags for the entity.  This will only happen under
 * certain conditions:
 *  - if $entity->field_tag_sync contains the field name.
 */
function field_tag_entity_update(EntityInterface $entity) {

  // Ignore processing of certain entity types.
  if (!$entity instanceof FieldableEntityInterface
    || $entity->getEntityTypeId() === 'field_tag') {
    return;
  }

  $field_tag_service = \Drupal::service('field_tag');
  $field_tag_storage = \Drupal::entityTypeManager()->getStorage('field_tag');

  foreach ($entity->getFieldDefinitions() as $field_name => $field_definition) {

    // Only fields that have field tagging enabled are processed.
    // TODO This may be giving a false positive.  Take a look at \field_tag_form_node_form_alter.  There we are actually checking for if ($settings['enabled']).
    if (!$field_definition instanceof FieldConfig
      || !$field_definition->getThirdPartySettings('field_tag')) {
      continue;
    }

    // Determine if we should remove all tags for all items on this field first.
    // This is indicated by assigning a fieldname as an array element on
    // $entity->field_tag_sync.  This happens in
    // field_tag_field_widget_form_alter or could be done by a developer in
    // custom code.
    $should_sync = in_array($field_name, $entity->field_tag_sync ?? []);
    if ($should_sync) {
      $field_tag_instances_to_delete = $field_tag_service
        ->getAllFieldTagsByParent($entity, $field_name);
      if ($field_tag_instances_to_delete) {
        $field_tag_storage->delete($field_tag_instances_to_delete);
      }
    }

    // Now go through and save any data that is present as `field_tag`.
    foreach ($entity->{$field_name} as $delta => $item) {

      // fieldTag instances get detached on save.
      unset($item->fieldTag);

      // We will only perform a field tag entity save if `field_tag` is
      // present on this field item.
      $new_tag_value = $field_tag_service->normalizeItemFieldTag($item);
      if (is_null($new_tag_value)) {
        continue;
      }

      $field_tag = FieldTag::loadByParentField($entity, $field_name, $delta);

      if (!$new_tag_value) {

        // Delete existing field tags when the new value is empty.
        if (!$field_tag->isNew()) {
          $field_tag->delete();
        }
      }

      // Save new ones and those whose new value differs from the old.
      elseif ($field_tag->isNew() || $field_tag->getValue() !== $new_tag_value) {
        $field_tag->get('tag')->value = $new_tag_value;
        $field_tag->save();
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes tags on entities that get deleted.
 */
function field_tag_entity_delete(EntityInterface $entity) {
  if ($entity instanceof FieldableEntityInterface
    && (($field_tags = \Drupal::service('field_tag')
      ->getAllFieldTagsByParent($entity)))) {
    \Drupal::entityTypeManager()
      ->getStorage('field_tag')->delete($field_tags);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function field_tag_field_storage_config_delete(Drupal\Core\Entity\EntityInterface $entity) {
  // When a field is deleted at the storage level it means that field no longer
  // exists on the entity and so we mark any tags associated with that field as
  // deleted for better housekeeping.  This flag can be used to prune the
  // entities by developers if they so desire.
  \Drupal::database()->update('field_tag')
    ->fields(['deleted' => TRUE])
    ->condition('parent_entity', $entity->get('entity_type'))
    ->condition('field_name', $entity->getName())
    ->execute();
}


//function field_tag_form_alter(&$form, FormStateInterface $form_state) {
//  if (empty($form['#entity_type']) || !isset($form['meta'])) {
//    return;
//  }
//  $form['field_tag_visibility'] = [
//    '#type' => 'details',
//    '#title' => t('Tags'),
//    '#attributes' => ['class' => ['node-form-field-tags']],
//    '#group' => 'advanced',
//    [
//      '#markup' => \Drupal\Core\Render\Markup::create(t('<input type="checkbox" class="js-field-tag-visibility"/> Reveal tags')),
//    ],
//  ];
//}


/**
 * Implements hook_migrate_source_info_alter().
 */
function field_tag_migrate_source_info_alter(&$info) {

  // We working with the "content_entity:*" source plugins, we are talking about
  // content in the current database, therefore we look to the current database
  // to see what entities have tags and then we modify only those classes in the
  // source plugins, so that when those entity types are loaded, the field tags
  // are automatically attached.
  $entity_types = \Drupal::database()
    ->select('field_tag', 'ft')
    ->fields('ft', ['parent_entity'])
    ->distinct('parent_entity')
    ->execute()
    ->fetchAllAssoc('parent_entity');
  foreach (array_keys($entity_types) as $entity_type) {
    $key = "content_entity:{$entity_type}";
    if (isset($info[$key]) && $info[$key]['requirements_met']) {
      $info[$key]['class'] = FieldTagContentEntity::class;
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function field_tag_entity_extra_field_info() {
  $extra = [];

  if (\Drupal::service('module_handler')->moduleExists('node')) {
    $node_types = \Drupal::entityTypeManager()
      ->getStorage('node_type')
      ->loadMultiple();
    foreach ($node_types as $node_type) {

      // The key cannot be the module name, because that might be mistaken with
      // the field API if a field exists called "field_tag".  This is why we use
      // an underscore in this pseudo-field name.
      $extra['node'][$node_type->id()]['form']['_field_tag'] = [
        'label' => t('Field tag list'),
        'description' => t('Display available field tags and descriptions.'),
        'weight' => 50,
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function field_tag_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if (!\Drupal::service('field_tag')->doesEntityUseFieldTags($node)) {
    return;
  }

  // Now since field tags are used in this form, we'll proceed to add the
  // details section to the advanced (sidebar) of the page.
  $form['_field_tag'] = [
    '#type' => 'details',
    '#title' => t('Field tags'),
    '#description' => t('When entering multiple tags, separate with a comma.'),
    '#group' => 'advanced',
  ];

  $info = field_tag_tags_info();
  foreach ($info['types'] as $type_id => $type_info) {
    $form['_field_tag'][$type_id] = [
      '#type' => 'fieldset',
      '#title' => $type_info['name'],
      [
        '#theme' => 'field_tag_tags_by_type',
        '#tag_type' => $type_info,
        '#field_tags' => $info['tags'][$type_id],
        '#sort' => TRUE,
      ],
    ];
  }
}

/**
 * Implements hook_theme().
 */
function field_tag_theme($existing, $type, $theme, $path) {
  return [
    'field_tag_tags_by_type' => [
      'variables' => [

        // Each element should have the keys "name" and "description".
        'tag_type' => '',

        // Each element should have the keys "tag" and "description".
        'field_tags' => '',

        // Set this to false to not alphabetically sort the tags.
        'sort' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_field_tag_tags_by_type(&$vars) {
  if ($vars['sort']) {
    usort($vars['field_tags'], function ($a, $b) {
      return strcasecmp($a['tag'], $b['tag']);
    });
  }
}
