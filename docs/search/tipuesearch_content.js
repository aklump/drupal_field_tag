var tipuesearch = {"pages":[{"title":"Changelog","text":"  All notable changes to this project will be documented in this file.  The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.  Todo   When field_tag_paragraph processes an item, redirect to the node edit form to immediately begin editing. Replace the need for attachTags with a hook like: hook_entity_storage_load() or hook_entity_field_values_init()   [0.4.0] - 2023-03-01  Added   lorem   Changed   The \\Drupal\\field_tag\\Event\\TagEvent now delivers an instance of FieldTag that has only the added or removed tags. You will most likely need to update your event handlers. Here is an example of a diff.   - if ('some_tag' === $event-&gt;getTag()) { + if ($event-&gt;getFieldTag()-&gt;hasTag('some_tag')) {   Deprecated   \\Drupal\\field_tag\\FieldTagService::normalizeFieldTagValue. Use implode(', ', \\Drupal\\field_tag\\Tags::create($value)-&gt;all()); \\Drupal\\field_tag\\FieldTagService::doesEntityUseFieldTags. Use \\Drupal\\field_tag\\FieldTagService::getTaggedFieldDefinitionsByEntity() cast to boolean \\Drupal\\field_tag\\FieldTagService::getFieldTagsAsArray. Use Tags::create($value)-&gt;all() instead. \\Drupal\\field_tag\\Event\\TagEvent::getEntity use \\Drupal\\field_tag\\Event\\TagEvent::getFieldTag-&gt;getParentEntity() instead. \\Drupal\\field_tag\\Event\\TagEvent::getTag use \\Drupal\\field_tag\\Event\\TagEvent::getFieldTag()-&gt;getValue() instead.   Removed   lorem   Fixed   lorem   Security   lorem   [0.3.0] - 2022-02-09  Added   Dispatch event \\Drupal\\field_tag\\Event\\FieldTagEvents::TAG_ADDED when a tag is added to a parent. Dispatch event \\Drupal\\field_tag\\Event\\FieldTagEvents::TAG_REMOVED when a tag is removed from a parent.   [0.2.0] - 2022-01-18  Added   Field tag paragraphs module FieldTag::removeTag() method.   [0.0.19] - 2020-04-22  Fixed   More bugs that might loose the field tags during certain operations.   Added   Manual tests for QA.   [0.0.17] - 2020-04-16  Fixed   A bug that might loose the field tags for an field item, on multiple item fields, if items with lower deltas were removed via AJAX.   [8.x-0.0.13] - 2020-03-16  Changed   loadFromParent has been replaced by loadByParentField. \\Drupal\\field_tag\\FieldTagService::attachTags now sets the FieldTag instance as $item-&gt;fieldTag instead of $item-&gt;field_tag. The latter should only be used when you are setting the value, as this is what will be saved when the entity is saved.  ","tags":"","url":"CHANGELOG.html"},{"title":"Field Tag Drupal Module","text":"    Summary  Provides a means to attach a tag-style input box to any entity field, which allows content managers to tag the field content.  Developers may take advantage of this additional metadata when manipulating fields.  The use case for which this was written is this.  Allow the tagging of images on an multiple value image field to indicate which image is the hero image, which image is the thumb image, and untagged images are just that.  It allows the content managers to indicate the role the image is playing for that given entity.  Visit https:\/\/aklump.github.io\/field_tag for full documentation.  About Tags   The field tag input box is a CSV string separating one or more tags, e.g. foo or foo, bar. Tags are not case-sensitive. Tags may contain spaces. Tags must be unique; duplicates will be removed.   Configuration   Enable this module. Visit the Manage fields page for the entity you've picked. Click on the Edit button for the given field. Enable the Field Tag, and adjust settings as necessary.   Give the permission Use field tagging to the correct user roles. Visit an entity edit page and make sure you see the tag field as configured.   What Happens When a Field is Deleted  The field tags themselves exist as FieldTag entity instances.  When a field which is field tag enabled on an entity type is deleted, all field tags that are associated with that entity type\/field are marked with a 1 in the deleted column in the field_tag table.  They still exist in the database but are not going to load via the normal field tag API, attach methods, etc.  You can still load them using FieldTag::load() if necessary, or access them via the database for reference.  Developers  Developers   This provides the UI and storage mechanism for field content tagging.  It creates a new entity type field_tag.  It's up to you to implement use cases for the data. See field_tag.api.php for code examples. Never rely on the id of a field tag entity beyond the scope of a single request. The ids should be considered ephemeral. The value of fieldTag on a \\Drupal\\Core\\Field\\FieldItemInterface is read only.  It gets added to the item when one calls \\Drupal\\field_tag\\FieldTagService::attachTags.  It is completely ignored during entity save operations, and will be unset at that time. The value of field_tag on a \\Drupal\\Core\\Field\\FieldItemInterface is for entity save operations.  If present, this value will overwrite the existing value of the tag for that field item.  This is a string and represents the full tag value, which may be CSV of multiple tags, e.g., 'foo, bar'.  $node-&gt;field_images-&gt;get(0)-&gt;field_tag = 'foo, bar, baz'; $node-&gt;save();  There is a PDF of manual tests which must suffice until other tests can be written. Run unit tests with .\/bin\/run_unit_tests.sh   Manage form display   Node forms will include a list of field tags in the Advanced area, but only if one or more fields have field tags enabled. You may control this form element by going to Manage form display for a given node type and changing the weight or disabling this element.   Migrations  Here's an example of how you might tag an image field during a migration, this assumes field_images has field tagging enabled and that 1) your source has no field tags or 2) you wish to replace those existing field tags.  process:   field_images:     plugin: sub_process     source: field_hero_images     process:       target_id: fid       alt: alt       title: title       width: width       height: height       field_tag:         plugin: default_value         default_value: hero   And here is a migration where source has field tags and you wish to merge in new ones.  process:     # First copy over as is from source.     field_images: field_images      # Then add two tags to the first element only.     field_images\/0\/field_tag:       - plugin: field_tag_add         source: field_images\/0\/field_tag         field_tag: cover, card   Contributing  If you find this project useful... please consider making a donation.  Contact The Developer  In the Loft Studios Aaron Klump - Web Developer sourcecode@intheloftstudios.com 360.690.6432 PO Box 29294 Bellingham, WA 98228-1294  http:\/\/www.intheloftstudios.com https:\/\/github.com\/aklump ","tags":"","url":"README.html"},{"title":"Developers","text":"   This provides the UI and storage mechanism for field content tagging.  It creates a new entity type field_tag.  It's up to you to implement use cases for the data. See field_tag.api.php for code examples. Never rely on the id of a field tag entity beyond the scope of a single request. The ids should be considered ephemeral. The value of fieldTag on a \\Drupal\\Core\\Field\\FieldItemInterface is read only.  It gets added to the item when one calls \\Drupal\\field_tag\\FieldTagService::attachTags.  It is completely ignored during entity save operations, and will be unset at that time. The value of field_tag on a \\Drupal\\Core\\Field\\FieldItemInterface is for entity save operations.  If present, this value will overwrite the existing value of the tag for that field item.  This is a string and represents the full tag value, which may be CSV of multiple tags, e.g., 'foo, bar'.  $node-&gt;field_images-&gt;get(0)-&gt;field_tag = 'foo, bar, baz'; $node-&gt;save();  There is a PDF of manual tests which must suffice until other tests can be written. Run unit tests with .\/bin\/run_unit_tests.sh  ","tags":"","url":"developers.html"},{"title":"Summary","text":"  Provides a means to attach a tag-style input box to any entity field, which allows content managers to tag the field content.  Developers may take advantage of this additional metadata when manipulating fields.  The use case for which this was written is this.  Allow the tagging of images on an multiple value image field to indicate which image is the hero image, which image is the thumb image, and untagged images are just that.  It allows the content managers to indicate the role the image is playing for that given entity.  Visit https:\/\/aklump.github.io\/field_tag for full documentation.  About Tags   The field tag input box is a CSV string separating one or more tags, e.g. foo or foo, bar. Tags are not case-sensitive. Tags may contain spaces. Tags must be unique; duplicates will be removed.   Configuration   Enable this module. Visit the Manage fields page for the entity you've picked. Click on the Edit button for the given field. Enable the Field Tag, and adjust settings as necessary.   Give the permission Use field tagging to the correct user roles. Visit an entity edit page and make sure you see the tag field as configured.   What Happens When a Field is Deleted  The field tags themselves exist as FieldTag entity instances.  When a field which is field tag enabled on an entity type is deleted, all field tags that are associated with that entity type\/field are marked with a 1 in the deleted column in the field_tag table.  They still exist in the database but are not going to load via the normal field tag API, attach methods, etc.  You can still load them using FieldTag::load() if necessary, or access them via the database for reference.  Developers  Developers   This provides the UI and storage mechanism for field content tagging.  It creates a new entity type field_tag.  It's up to you to implement use cases for the data. See field_tag.api.php for code examples. Never rely on the id of a field tag entity beyond the scope of a single request. The ids should be considered ephemeral. The value of fieldTag on a \\Drupal\\Core\\Field\\FieldItemInterface is read only.  It gets added to the item when one calls \\Drupal\\field_tag\\FieldTagService::attachTags.  It is completely ignored during entity save operations, and will be unset at that time. The value of field_tag on a \\Drupal\\Core\\Field\\FieldItemInterface is for entity save operations.  If present, this value will overwrite the existing value of the tag for that field item.  This is a string and represents the full tag value, which may be CSV of multiple tags, e.g., 'foo, bar'.  $node-&gt;field_images-&gt;get(0)-&gt;field_tag = 'foo, bar, baz'; $node-&gt;save();  There is a PDF of manual tests which must suffice until other tests can be written. Run unit tests with .\/bin\/run_unit_tests.sh   Manage form display   Node forms will include a list of field tags in the Advanced area, but only if one or more fields have field tags enabled. You may control this form element by going to Manage form display for a given node type and changing the weight or disabling this element.   Migrations  Here's an example of how you might tag an image field during a migration, this assumes field_images has field tagging enabled and that 1) your source has no field tags or 2) you wish to replace those existing field tags.  process:   field_images:     plugin: sub_process     source: field_hero_images     process:       target_id: fid       alt: alt       title: title       width: width       height: height       field_tag:         plugin: default_value         default_value: hero   And here is a migration where source has field tags and you wish to merge in new ones.  process:     # First copy over as is from source.     field_images: field_images      # Then add two tags to the first element only.     field_images\/0\/field_tag:       - plugin: field_tag_add         source: field_images\/0\/field_tag         field_tag: cover, card   Contributing  If you find this project useful... please consider making a donation. ","tags":"","url":"drupal_project_page.html"},{"title":"Tag Events","text":"  If you need to react to a tag being added or removed you can subscribe to the event(s): \\Drupal\\field_tag\\Event\\FieldTagEvents::TAG_REMOVED and\/or \\Drupal\\field_tag\\Event\\FieldTagEvents::TAG_ADDED.  See \\Drupal\\field_tag\\Event\\TagEvent, for the context available.  Here is an example implementation:  class Foo implements \\Symfony\\Component\\EventDispatcher\\EventSubscriberInterface {    public static function getSubscribedEvents() {     return [       \\Drupal\\field_tag\\Event\\FieldTagEvents::TAG_ADDED =&gt; 'invalidateBlockCache',       \\Drupal\\field_tag\\Event\\FieldTagEvents::TAG_REMOVED =&gt; 'invalidateBlockCache',     ];   }    public function invalidateBlockCache(TagEvent $event) {      \/\/ If we see the \"highlights\" tag adding\/removing, we need to rebuild the     \/\/ highlights block (id 17), so we have to invalidate the cache tag.     if ($event-&gt;getFieldTag()-&gt;has('highlights') {       $cid = 'block_content:17';       $this-&gt;cacheTagsInvalidator-&gt;invalidateTags([$cid]);     }   }  }   Deleting Parent Entities  When parent entities (those with field tagging enabled) are deleted, the associated field tag entities are also deleted. This also fires the \\Drupal\\field_tag\\Event\\FieldTagEvents::TAG_REMOVED event. ","tags":"","url":"events.html"},{"title":"Creating Field Tags in Code","text":"  See field_tag.api.php for usages examples. ","tags":"","url":"in-code.html"},{"title":"Known Issues","text":"  Cannot Tag Some Empty Items  If you try to add a tag to a textfield that is empty, and save the entity, the tag will not save.    However, if you tag an item and then later remove the value making it empty, the tag remains. ","tags":"","url":"issues.html"},{"title":"Relationships","text":"  The field tag entities are related to a given field on a parent entity. Specifically to a single delta on said field. In other words, the thing that is tagged by a field_tag entity can only be known when you have: entity + field + delta.    There is a possible further relationship when the field is an entity reference field such as a file field or a paragraph. In this case the field tag will be related to the target entity as well.   ","tags":"","url":"relationships.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"}]};
